= Funktionen Schreiben in **R**
Dominik Cullmann 
:toc2:
:numbered:
:data-uri:
:duration: 120

//begin_only_slide
== Skript
https://fvafrcu.github.io/funktionen_in_r/[https://fvafrcu.github.io/funktionen_in_r/]
//end_only_slide

== Worum geht es?

//begin_no_slide
Naja, ums Schreiben von Funktionen in der Programmiersprache **R**.
//end_no_slide

=== Was sind Funktionen?

* Funktionen sind Programmkonstrukte, mit denen Du Teile des von Dir 
  geschriebenen Codes wiederverwenden kannst
  (siehe https://de.wikipedia.org/wiki/Funktion_(Programmierung)[Wikipedia]).
* Funktionen sind in den Standardbiliotheken jeder Programmiersprache vorhanden, 
  viele R-Funktionen kennst Du wahrscheinlich schon: `sum()`, `mean()` 
  oder `summary()`.

=== Warum Funktionen?

* Damit Du Teile des von Dir geschriebenen Codes wiederverwenden kannst.
* Dann musst Du, wenn Du Fehler im Code entdeckst, diesen auch nur an einer 
  Stelle korrigieren.

=== Wann Funktionen?

Immer wenn Du merkst, dass Du (alten) Code mehrfach kopierst und an anderer
Stelle einfügst und ihn kaum veränderst, solltest Du darüber nachdenken, eine Funktion (oder mehrere) daraus zu machen. 


== Eine neue Summenfunktion für R

=== Warum wir diese Funktion nicht schreiben sollten

//begin_no_slide
Eine Summenfunktion gibt es wahrscheinlich in jeder Programmiersprache, in **R**
heißt sie `sum()`. Diese Funktion ist besser, stabiler und schneller, als
alles, das wir selbst programmieren können.
//end_no_slide

=== Warum wir es trotzdem tun

//begin_no_slide
Ich habe die Summenberechnung ausführlich als Beispiel zur Schleifenprogrammierung in 
https://fvafrcu.github.io/programmieren_in_r/#gute-schleifen[Programmieren in R] benutzt.
//end_no_slide


== Vom Code ...
//begin.rcode, eval = FALSE
include::src/sum.R[]
//end.rcode
//begin.rcode, include = FALSE
source("src/sum.R", local = knitr::knit_global())
//end.rcode

//begin_no_slide
Dabei siehst Du:
//end_no_slide

<1> Definition des zu summierenden Vektors
<2> Definition des zur Addition neutralen Elementes
<3> Schleife über den Vektor
<4> Addition
<5> Ausgabe des Ergebnisses

== ... zur Funktion
//begin_no_slide
Für unsere Summenfunktion soll die Definition des zu summierenden Vektors
der Anwenderin überlassen werden, daher wird der Vektor zu einem Argument
der Funktion. Ich wähle als Namen in diesem Fall +x+, das könnte aber
auch +a+ bleiben, es ist eine Frage der Konvention, und unter +x+ verstehen wir
meist eine Unbekannte. Und als Ausgabe verwenden wir keine Druck- sondern eine
Rückgabefunktion (+return()+ statt +print()+). 
Das Ergebnis sieht dann so aus:

//end_no_slide



//begin.rcode, eval = FALSE
include::src/my_sum.R[]
//end.rcode
//begin.rcode, echo = FALSE
source("src/my_sum.R")
//end.rcode


== Scoping
== Scoping I //slide_only
=== Schreibzugriffe
.Ausgangszustand
//begin_no_slide
Im Augenblick hat das Objekte +value+ den Wert +r value+:
//end_no_slide

//begin.rcode
print(value)
//end.rcode

.Funktionsausführung
//begin_no_slide
Jetzt wenden wir unsere Summenfunktion an und berechnen die Summe eines anderen Vektors: 
//end_no_slide
//begin.rcode
print(my_sum(1:3))
//end.rcode

//begin_no_slide
Das Objekt `value` behält seinen Wert:
//end_no_slide
//begin.rcode
print(value)
//end.rcode
//begin_no_slide
Und das, obwohl wir innerhalb der Funktion dem Objekt +value+ in der ersten
Zeile den Wert 0 zuweisen und diesen dann in der Schleife mit den Werten 1, 3
und 6 überschreiben:
**R** verwaltet automatisch die Gültigkeitsbereiche aller Objekte. 
Es gibt daher ein Objekt names  +value+ außerhalb der Funktion, das den Wert +r value+ enthält und unverändert bleibt.
Innerhalb der Funktion legt **R** ein neues lokales Objekt, ebenfalls mit dem Namen
+value+, an.
Du _kannst_ auch aus einer Funktion in einen anderen Gültigkeitsbereich schreiben, wenn Du das wirklich willst. Aber das lassen wir vorerst.
//end_no_slide

== Scoping II //slide_only

=== Lesezugriffe
.Lesen ist unsicher
//begin_no_slide
Mit dem Namen eines Objektes wird dieses gelesen, innerhalb einer Funktion sucht
**R** zunächst nach einem lokalen Objekt des gesuchten Namens, dann in den der
Funktion übergeordneten Gültigkeitsbereich, also außerhalb der Funktion.

Das kann zu unerwünschten Nebeneffekten führen. Stell Dir vor, du vergißt beim
Schreiben der Summenfunktion die Definition des zur Addition neutralen
Elementes:
//end_no_slide
//begin.rcode, eval = FALSE
include::src/my_sum_scope1.R[]
//end.rcode
//begin.rcode, echo = FALSE
source("src/my_sum_scope1.R", local = knitr::knit_global())
//end.rcode
//begin_no_slide

Du führst die Funktion aus und erhälst:
//end_no_slide
//begin.rcode
print(my_sum_broken(1:3))
//end.rcode
Was ist passiert?
//begin_no_slide
Im ersten Durchlauf der Schleife gibt es beim Lesen von
+value+ noch kein lokales Objekt dieses Namens. Daher sucht **R** außerhalb der
Funktion und findet ein Objekt mit dem Wert +r value+. 
Zu diesem Objekt addieren
wir +x_i+, das im ersten Schleifendurchlauf den Wert +1+ enthält und erschaffen
damit in der Funktion ein lokales Objekt names +value+, das dann im zweiten
Durchlauf der Schleife auch gelesen werden kann.
//end_no_slide

== Scoping III //slide_only
//begin_no_slide
Wenn Du diese Funktion verwendest, ohne vorher das Objekt +value+ zu definieren,
oder das Objekt +value+ entfernst und dann die Funktion ausführst
//end_no_slide
//begin.rcode
rm(value)
print(my_sum_broken(1:3))
//end.rcode
//begin_no_slide
erhälst Du einen Fehler, weil **R** auch außerhalb der Funktion kein Objekt
names +value+ finden kann. Und diesen Fehler erwarten wir ja eigentlich.
//end_no_slide

== Scoping IV //slide_only
.Sicherer Lesen
//begin_no_slide
Wie wir eine Funktion dazu bringen können, außerhalb ihres Gültigkeitsbereiches
zu schreiben (nein, das _wie_ habe ich Dir noch nicht gezeigt... ), so können wir 
eine Funktion auch zwingen, beim Lesen nur nach lokalen Objekten zu
suchen:
//end_no_slide
//begin.rcode, eval = FALSE
include::src/my_sum_scope2.R[]
//end.rcode
//begin.rcode, echo = FALSE
source("src/my_sum_scope2.R", local = knitr::knit_global())
//end.rcode

//begin_no_slide
Selbst wenn wir ein Objekt namens +value+ anlegen, gibt die Funktion einen
Fehler aus:
//end_no_slide
//begin.rcode
value <- 42
my_sum_safer(1:10)
//end.rcode
//begin_no_slide
Ich finde es aber praktiabler, beim Schreiben einer Funktion darauf zu achten,
welche Objekte ich lese. + 
Und wenn ich Funktionen <<_testing,teste>>, finde ich Fehler, die auf Scoping beruhen,
sehr schnell. 
//end_no_slide

== Argumente
Defaults

== Return Value und Side Effects
was ist was

== Modularisierung

== Funktionen verwalten

=== Lokal
Mit source

===  global 
Mit .Rprofile und einer Schleife

=== Als Package
Das ist am aufwendigsten, aber auch am elegantesten.

== Typentests

//begin_no_slide
Neben +asserthat+ gibt es auch das R-Package +checkmate+.
//end_no_slide
assertthat und checkmate
//begin.rcode
assertthat::assert_that(is.numeric(6))
//end.rcode
//begin.rcode
assertthat::assert_that(is.numeric("This is a string."))
//end.rcode
//begin.rcode, eval = FALSE
include::src/my_sum_assertion.R[]
//end.rcode
//begin.rcode, echo = FALSE
source("src/my_sum_assertion.R")
//end.rcode

== Testing

//begin_no_slide
Neben +testthat+ gibt es auch das R-Package +RUnit+.
//end_no_slide

=== Testthat

//begin.rcode
testthat::test_that("Simple test on summation.",
                    testthat::expect_identical(my_sum(c(2, 7)), 8)
                    )


//end.rcode
//begin.rcode, eval = FALSE
include::src/test_my_sum.R[]
//end.rcode
//begin.rcode, echo = FALSE
source("src/test_my_sum.R")
//end.rcode

=== Test Coverage

//begin.rcode
cov <- covr::file_coverage("src/my_sum_assertion.R", "src/test_my_sum_assertion.R")
print(cov)
//end.rcode

//begin.rcode
cov <- covr::file_coverage("src/my_sum_coverage.R", "src/test_my_sum_assertion.R")
print(cov)
//end.rcode

//begin.rcode
covr::zero_coverage(cov)
//end.rcode

== cleanr


== Funktionen dokumentieren
