:toc2:
:numbered:
:data-uri:
= Funktionen in **R**

== Funktionen in R

=== Was sind Funktionen?

* Funktionen sind Programmkonstrukte, mit denen Du Teile des von Dir 
  geschriebenen Codes wiederverwenden kannst
  (siehe https://de.wikipedia.org/wiki/Funktion_(Programmierung)[Wikipedia]).
* Funktionen sind in den Standardbiliotheken jeder Programmiersprache vorhanden, 
  viele R-Funktionen kennst Du wahrscheinlich schon: `sum()`, `mean()` 
  oder `summary()`.


=== Warum Funktionen?

* Damit Du Teile des von Dir geschriebenen Codes wiederverwenden kannst.
* Dann musst Du, wenn Du Fehler im Code entdeckst, diesen auch nur an einer 
  Stelle korrigieren.

==== Wann?

Immer wenn Du merkst, dass Du (alten) Code mehrfach kopierst und an anderer Stelle einf&uuml;gst und ihn kaum ver&auml;nderst, solltest Du dar&uuml;ber nachdenken, eine Funktion (oder mehrere) daraus zu machen. 

Praxis 
------

Eine Summenfunktion f&uuml;r R
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Warum wir diese Funktion nicht schreiben sollten
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//begin_no_slide
Eine Summenfunktion gibt es wahrscheinlich in jeder Programmiersprache, in **R** hei&szlig;t sie `sum()`. Diese Funktion ist besser, stabiler und schneller, als alles, das wir selbst programmieren k&ouml;nnen.
//end_no_slide

Warum wir es trotzdem tun
^^^^^^^^^^^^^^^^^^^^^^^^^

Ich habe die Summenberechnung ausf&uuml;hrlich als Beispiel zur Schleifenprogrammierung in 
https://fvafrcu.github.io/programmieren_in_r/#gute-schleifen[Programmieren in R] benutzt.

//begin.rcode, eval = FALSE
include::src/sum.R[]
//end.rcode
<1> Neutrales Element zur Addition
<2> Schleife &uuml;ber den Vektor
<3> Addition
//begin.rcode, echo = FALSE
source("src/sum.R")
//end.rcode

//begin.rcode, eval = FALSE
include::src/my_sum.R[]
//end.rcode
//begin.rcode, echo = FALSE
source("src/my_sum.R")
//end.rcode
== Funktionen dokumentieren

== Funktionen verwalten

=== Lokal
Mit source

===  global 
Mit .Rprofile und einer Schleife

== Als Package

== Spezifika 

=== Argumente


=== recursive?
eher nicht

=== Scoping
auf jeden fall, auch parent.env

=== Return Value und Side Effects
was ist was

== Modularisierung

== Typentests

//begin_no_slide
Neben +asserthat+ gibt es auch das R-Package +checkmate+.
//end_no_slide
assertthat und checkmate
//begin.rcode
assertthat::assert_that(is.numeric(6))
//end.rcode
//begin.rcode
assertthat::assert_that(is.numeric("This is a string."))
//end.rcode
//begin.rcode, eval = FALSE
include::src/my_sum_assertion.R[]
//end.rcode
//begin.rcode, echo = FALSE
source("src/my_sum_assertion.R")
//end.rcode

== Testing

//begin_no_slide
Neben +thestthat+ gibt es auch das R-Package +RUnit+.
//end_no_slide

=== Testthat

//begin.rcode
testthat::test_that("Simple test on summation.",
                    testthat::expect_identical(my_sum(c(2, 7)), 8)
                    )


//end.rcode
//begin.rcode, eval = FALSE
include::src/test_my_sum.R[]
//end.rcode
//begin.rcode, echo = FALSE
source("src/test_my_sum.R")
//end.rcode

=== Test Coverage

//begin.rcode
cov <- covr::file_coverage("src/my_sum_assertion.R", "src/test_my_sum_assertion.R")
print(cov)
//end.rcode

//begin.rcode
cov <- covr::file_coverage("src/my_sum_coverage.R", "src/test_my_sum_assertion.R")
print(cov)
//end.rcode

//begin.rcode
covr::zero_coverage(cov)
//end.rcode
== cleanr


