= Funktionen Schreiben in **R**
Dominik Cullmann 
:toc2:
:numbered:

== Funktionen in R

=== Was sind Funktionen?

//begin_no_slide
* Funktionen sind Programmkonstrukte, mit denen Du Teile des von Dir 
  geschriebenen Codes wiederverwenden kannst
  (siehe https://de.wikipedia.org/wiki/Funktion_(Programmierung)[Wikipedia]).
* Funktionen sind in den Standardbiliotheken jeder Programmiersprache vorhanden, 
  viele R-Funktionen kennst Du wahrscheinlich schon: `sum()`, `mean()` 
  oder `summary()`.

//end_no_slide

=== Warum Funktionen?

//begin_no_slide
* Damit Du Teile des von Dir geschriebenen Codes wiederverwenden kannst.
* Dann musst Du, wenn Du Fehler im Code entdeckst, diesen auch nur an einer 
  Stelle korrigieren.
//end_no_slide

==== Wann?

//begin_no_slide
Immer wenn Du merkst, dass Du (alten) Code mehrfach kopierst und an anderer Stelle einf&uuml;gst und ihn kaum ver&auml;nderst, solltest Du dar&uuml;ber nachdenken, eine Funktion (oder mehrere) daraus zu machen. 
//end_no_slide

Praxis 
------

Eine neue Summenfunktion f&uuml;r R
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Warum wir diese Funktion nicht schreiben sollten
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//begin_no_slide
Eine Summenfunktion gibt es wahrscheinlich in jeder Programmiersprache, in **R** hei&szlig;t sie `sum()`. Diese Funktion ist besser, stabiler und schneller, als alles, das wir selbst programmieren k&ouml;nnen.
//end_no_slide

Warum wir es trotzdem tun
^^^^^^^^^^^^^^^^^^^^^^^^^

//begin_no_slide
Ich habe die Summenberechnung ausf&uuml;hrlich als Beispiel zur Schleifenprogrammierung in 
https://fvafrcu.github.io/programmieren_in_r/#gute-schleifen[Programmieren in R] benutzt.
//end_no_slide


[source,r]
----
include::src/sum.R[]
----

<1> Neutrales Element zur Addition
<2> Schleife &uuml;ber den Vektor
<3> Addition

----
## [1] 19
----



[source,r]
----
include::src/my_sum.R[]
----



== Spezifika 

=== Argumente
Defaults

=== Scoping


[source,r]
----
print(value)
----

----
## [1] 19
----


[source,r]
----
print(my_sum(1:3))
----

----
## [1] 6
----


[source,r]
----
print(value)
----

----
## [1] 19
----



[source,r]
----
include::src/my_sum_scope1.R[]
----



[source,r]
----
print(my_sum(1:3))
----

----
## [1] 6
----

[source,r]
----
print(environment() )
----

----
## <environment: 0x55d26552e1e8>
----

[source,r]
----
print(ls(env = knitr::knit_global()))
----

----
## [1] "adjust_hooks"   "file_name"      "knit"           "knit_out_file" 
## [5] "r_code_pattern"
----

[source,r]
----
rm(value)
----

[source,r]
----
## Warning in rm(value): object 'value' not found

----




[source,r]
----
print(my_sum_broken(1:3))
----

----
## [1] 6
----

auf jeden fall, auch parent.env

=== Return Value und Side Effects
was ist was

== Modularisierung
== Funktionen dokumentieren

== Funktionen verwalten

=== Lokal
Mit source

===  global 
Mit .Rprofile und einer Schleife

== Als Package


== Typentests

//begin_no_slide
Neben +asserthat+ gibt es auch das R-Package +checkmate+.
//end_no_slide
assertthat und checkmate

[source,r]
----
assertthat::assert_that(is.numeric(6))
----

----
## [1] TRUE
----


[source,r]
----
assertthat::assert_that(is.numeric("This is a string."))
----

[source,r]
----
## Error: "This is a string." is not a numeric or integer vector

----


[source,r]
----
include::src/my_sum_assertion.R[]
----



== Testing

//begin_no_slide
Neben +thestthat+ gibt es auch das R-Package +RUnit+.
//end_no_slide

=== Testthat


[source,r]
----
testthat::test_that("Simple test on summation.",
                    testthat::expect_identical(my_sum(c(2, 7)), 8)
                    )
----

[source,r]
----
## Error: Test failed: 'Simple test on summation.'
## * my_sum(c(2, 7)) not identical to 8.
## 1/1 mismatches
## [1] 9 - 8 == 1

----


[source,r]
----
include::src/test_my_sum.R[]
----



=== Test Coverage


[source,r]
----
cov <- covr::file_coverage("src/my_sum_assertion.R", "src/test_my_sum_assertion.R")
print(cov)
----

[source,r]
----
## Coverage: 100.00%

----

[source,r]
----
## src/my_sum_assertion.R: 100.00%

----



[source,r]
----
cov <- covr::file_coverage("src/my_sum_coverage.R", "src/test_my_sum_assertion.R")
print(cov)
----

[source,r]
----
## Coverage: 83.33%

----

[source,r]
----
## src/my_sum_coverage.R: 83.33%

----



[source,r]
----
covr::zero_coverage(cov)
----

----
##                filename functions line value
## 2 src/my_sum_coverage.R    my_sum    3     0
----

== cleanr


