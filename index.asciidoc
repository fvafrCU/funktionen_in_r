= Funktionen Schreiben in **R**
Dominik Cullmann 
:toc2:
:numbered:
:data-uri:
:duration: 120

//begin_only_slide
== Skript
https://fvafrcu.github.io/funktionen_in_r/[https://fvafrcu.github.io/funktionen_in_r/]
//end_only_slide

== Worum geht es?

=== Was sind Funktionen?

* Funktionen sind Programmkonstrukte, mit denen Du Teile des von Dir 
  geschriebenen Codes wiederverwenden kannst
  (siehe https://de.wikipedia.org/wiki/Funktion_(Programmierung)[Wikipedia]).
* Funktionen sind in den Standardbiliotheken jeder Programmiersprache vorhanden, 
  viele R-Funktionen kennst Du wahrscheinlich schon: `sum()`, `mean()` 
  oder `summary()`.

=== Warum Funktionen?

* Damit Du Teile des von Dir geschriebenen Codes wiederverwenden kannst.
* Dann musst Du, wenn Du Fehler im Code entdeckst, diesen auch nur an einer 
  Stelle korrigieren.

=== Wann Funktionen?

Immer wenn Du merkst, dass Du (alten) Code mehrfach kopierst und an anderer Stelle einf&uuml;gst und ihn kaum ver&auml;nderst, solltest Du dar&uuml;ber nachdenken, eine Funktion (oder mehrere) daraus zu machen. 


== Eine neue Summenfunktion f&uuml;r R

=== Warum wir diese Funktion nicht schreiben sollten

//begin_no_slide
Eine Summenfunktion gibt es wahrscheinlich in jeder Programmiersprache, in **R** hei&szlig;t sie `sum()`. Diese Funktion ist besser, stabiler und schneller, als alles, das wir selbst programmieren k&ouml;nnen.
//end_no_slide

=== Warum wir es trotzdem tun

//begin_no_slide
Ich habe die Summenberechnung ausf&uuml;hrlich als Beispiel zur Schleifenprogrammierung in 
https://fvafrcu.github.io/programmieren_in_r/#gute-schleifen[Programmieren in R] benutzt:
//end_no_slide


== Vom Code ...

[source,r]
----
include::src/sum.R[]
----



//begin_no_slide
Dabei siehst Du:
//end_no_slide

<1> Definition des zu summierenden Vektors
<2> Definition des zur Addition neutralen Elementes
<3> Schleife &uuml;ber den Vektor
<4> Addition
<5> Ausgabe des Ergebnisses

== ... zur Funktion
//begin_no_slide
F&uuml;r unsere Summenfunktion soll die Definition des zu summierenden Vektors
der Anwenderin &uuml;berlassen werden, daher wird der Vektor zu einem Argument
der Funktion. Ich w&auml;hle als Namen in diesem Fall +x+, das k&ouml;nnte aber
auch +a+ bleiben, es ist eine Frage der Konvention, und unter +x+ verstehen wir
meist eine Unbekannte. Und als Ausgabe verwenden wir keine Druck- sondern eine
R&uuml;ckgabefunktion (+return()+ statt +print()+). 
Das Ergebnis sieht dann so aus:

//end_no_slide




[source,r]
----
include::src/my_sum.R[]
----




== Scoping
== Scoping I //slide_only
.Ausgangszustand
//begin_no_slide
Objekte in **R** haben einen G&uuml;ltigkeitsbereich. Im Augenblick hat das Objekte +value+ den Wert 19:
//end_no_slide


[source,r]
----
print(value)
----

----
## [1] 19
----


.Funktionsausf&uuml;rung
//begin_no_slide
Jetzt wenden wir unsere Summenfunktion an und berechnen die Summe eines anderen Vektors: 
//end_no_slide

[source,r]
----
print(my_sum(1:3))
----

----
## [1] 6
----


//begin_no_slide
Das Objekt `value` beh&auml;lt seinen Wert:
//end_no_slide

[source,r]
----
print(value)
----

----
## [1] 19
----

//begin_no_slide
Und dass, obwohl wir innerhalb der Funktion dem Objekt +value+ in der ersten Zeile den Wert 0 zuweisen und diesen dann in der Schleife mit den Werten 1, 3 und 6 &uuml;berschreiben.
R trennt automatisch die G&uuml;ltigkeitsbereiche verschiedener Objekte gleichen Namens, es gibt ein Objekt namens +value+ innerhalb und ein namensgleiches au&szlig;erhalb unserer Funktion. Du  *kannst* die auch aus einer Funktion in einen anderen G&uuml;ltigkeitsbereich schreiben, wenn Du das wirklich willst. Aber das lassen wir vorerst.
//end_no_slide

== Scoping II //slide_only

//begin_no_slide
.#TODO: add content


//end_no_slide

[source,r]
----
include::src/my_sum_scope1.R[]
----



[source,r]
----
print(my_sum(1:3))
----

----
## [1] 6
----

[source,r]
----
print(my_sum_broken(1:3))
----

----
## [1] 25
----


== Scoping III //slide_only

[source,r]
----
rm(value)
----



[source,r]
----
print(my_sum_broken(1:3))
----

[source,r]
----
## Error in my_sum_broken(1:3): object 'value' not found

----


== Argumente
Defaults

== Return Value und Side Effects
was ist was

== Modularisierung

== Funktionen verwalten

=== Lokal
Mit source

===  global 
Mit .Rprofile und einer Schleife

=== Als Package


== Typentests

//begin_no_slide
Neben +asserthat+ gibt es auch das R-Package +checkmate+.
//end_no_slide
assertthat und checkmate

[source,r]
----
assertthat::assert_that(is.numeric(6))
----

----
## [1] TRUE
----


[source,r]
----
assertthat::assert_that(is.numeric("This is a string."))
----

[source,r]
----
## Error: "This is a string." is not a numeric or integer vector

----


[source,r]
----
include::src/my_sum_assertion.R[]
----



== Testing

//begin_no_slide
Neben +thestthat+ gibt es auch das R-Package +RUnit+.
//end_no_slide

=== Testthat


[source,r]
----
testthat::test_that("Simple test on summation.",
                    testthat::expect_identical(my_sum(c(2, 7)), 8)
                    )
----

[source,r]
----
## Error: Test failed: 'Simple test on summation.'
## * my_sum(c(2, 7)) not identical to 8.
## 1/1 mismatches
## [1] 9 - 8 == 1

----


[source,r]
----
include::src/test_my_sum.R[]
----



=== Test Coverage


[source,r]
----
cov <- covr::file_coverage("src/my_sum_assertion.R", "src/test_my_sum_assertion.R")
print(cov)
----

[source,r]
----
## Coverage: 100.00%

----

[source,r]
----
## src/my_sum_assertion.R: 100.00%

----



[source,r]
----
cov <- covr::file_coverage("src/my_sum_coverage.R", "src/test_my_sum_assertion.R")
print(cov)
----

[source,r]
----
## Coverage: 83.33%

----

[source,r]
----
## src/my_sum_coverage.R: 83.33%

----



[source,r]
----
covr::zero_coverage(cov)
----

----
##                filename functions line value
## 2 src/my_sum_coverage.R    my_sum    3     0
----


== cleanr


== Funktionen dokumentieren
